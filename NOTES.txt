DOM-based matchers
.tobeInTheDocument() // Does not need argumet
.toBeVisible()
.toBeChecked()
Matchers
.toBe('hello')
.toHaveLength(7)

jest-dom assertions:
.toBeEnabled
.toBeDisabled
.toBeChecked


Global Jest method has two arguments:

String description
test function

TDD (test driven development)

"red-green" testing


Types of test
Unit test
Integration test
Functional test (test behavior, particular fuction of sofware)
Aceptance / End to End (E2E) test
    -Use actual browser and server (Cypres, selenium)


BDD (behavior driven development)



----- Example test -----

test('button has correct initial color', () => {
    render (<App />);

    // Find an element with a role of button and text of 'Change to blue';
    const colorButton = screen.getByRole('button', { name: 'Change to blue'});

    // Expect the background color to be red
    expect(colorButton).toHaveStyle({ backgroundColor: 'red' });

    //click button
    fireEvent.click(colorButton);

    // expect the background color to be blue
    expect(colorButton.toHaveStyle({ backgroundColor: 'blue' }));

    //expect the button text to be 'Chage to red'
    expect(colorButton.textContent).toBe('Change to red');
})

test ('initial conditions, () => {
    render(<App />);

    // check that the button starts out enabled
    const colorButton = screen.getByRole('button', { name: 'Change to blue'});
    expect(colorButton).toBeEnabled();

    // check that the checkbox starts out uncheked

    const checkbox = screen.getByRole('checkbox');
    expect(checkbox).not.toBeChecked();
})


userEvents
Screen Query Methods
-Command:
	-get
	-query
	-find

[All]
-exclude
-include

QueryType
-Role
-AltText
-Text
-Form elements
	-PlaceholderText
	-LabelText
	-DisplayValue
